<!DOCTYPE html>
<html lang="ko">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<meta name="format-detection" content="telephone=no, address=no, email=no, date=no">
	<meta http-equiv="X-UA-Compatible" content="ie=edge">
	<title>05 jvascript - 변수(Variable), 객체(Object), 함수(Function)</title>
	<link rel="shortcut icon" type="image/x-icon" href="favicon.ico">
	<link rel="stylesheet" type="text/css" href="css/reset.css">
	<script type="text/javascript" src="js/jquery/jquery-1.12.4.min.js"></script>
	<script type="text/javascript" src="js/jquery/jquery.easing.min.js"></script>
	<style>
		body{height:5000px;}
		.selectbox{
			position:relative;
			width:400px;
			margin:0 auto;
		}
		.selectbox .link{
			display:block;
			padding:20px;
			border:1px solid red;
			color:#000;
			font-size:20px;
		}
		.selectbox .link span{
			color:inherit;
			font-size:inherit;
		}
		.selectbox ul{
			display:none;
			position:absolute;
			top:67px;
			left:0;
			width:100%;
			background:#fff;
		}
		.selectbox li{
			width:100%;
		}
		.selectbox li a{
			display:block;
			padding:10px;
			border:1px solid #000;
			color:blue;
			font-size:15px;
		}

		.chkbox{
			width:400px;
			margin:0 auto;
		}
		.chkbox textarea{
			width:100%;
			height:80px;
			padding:20px;
			border:1px solid #000;
		}

		.fbox{
			width:400px;
			margin:0 auto;
		}
		.fbox a{
			display:block;
			padding:20px;
			border:1px solid #000;
			text-align:center;
		}
		.fbox .box{
			display:none;
			padding:50px;
			border:1px solid red;
			text-align:center;
		}
	</style>
</head>
<body>
	<script>
		var name = "자바스크립트";
		var num = 12345;
		//console.log(name + num);
		//document.write(name + num);

		$(function(){
			//$('body').text(name);
			var $selDep1 = $('.selectbox ul');
			var $selDep1Link = $('.selectbox ul li a');
			$('.link').on('click', function(){
				var $this = $(this);
				// var name= "javascript";
				// $('.text').text($this.text());
				$selDep1.show();
			})
			$selDep1.find('>li').click(function(){
				$(this).addClass('on').siblings().removeClass('on');
				$('.inptext').text( $('.on a').text() );
				$selDep1.hide();
				return false;
			});

			/* radio / checkbox 활용한 변수 활용 및 텍스트 뿌리기 */
			var $radio = $('.chkbox label input');
			var $chkText = $('.chkbox label input + i');
			var $chkChecked = $('.chkbox label input:checked + i');
			var $textArea = $('textarea');
			// $chkChecked.val( $textArea );

			//$textArea.val( $chkChecked.text() );
			$radio.on("click", function() {
				var $chkChecked = $('.chkbox label input:checked + i');
				$textArea.val( $chkChecked.text() );
			});


			//fBoxClose();
			//fBox();
		})
		/* 함수를 활용한 보이고 안보이기 테스트 */
		function fBox(){
			$('.fbox .box').show();
			return false;
		}
		function fBoxClose(){
			//$('.fbox .box').click(function(){
				$('.fbox .box').hide();
			//})
		}
	</script>

	<div class="selectbox">
		<a href="#" class="link"><span class="inptext">선택</span></a>
		<ul>
			<li><a href="#">서울시</a></li>
			<li><a href="#">부산시</a></li>
			<li><a href="#">제주시</a></li>
		</ul>
	</div>

	<div class="chkbox">
		<label>
			<input type="radio" name="rad"> <i>봄</i>
		</label>
		<label>
			<input type="radio" name="rad"> <i>여름</i>
		</label>
		<label>
			<input type="radio" name="rad"> <i>가을</i>
		</label>
		<label>
			<input type="radio" name="rad"> <i>겨울</i>
		</label>
		<label>
			<input type="checkbox" name="rad"> <i>HTML</i>
		</label>
		<label>
			<input type="checkbox" name="rad"> <i>CSS</i>
		</label>
		<label>
			<input type="checkbox" name="rad"> <i>Javascript</i>
		</label>
		<label>
			<input type="checkbox" name="rad"> <i>Jquery</i>
		</label>
		<textarea></textarea>
	</div>

	<div class="fbox">
		<a href="javascript:;" onclick="fBox();">클릭하세요</a>
		<div class="box" onclick="fBoxClose();">박스안 내용입니다</div>
	</div>
	<!--
		https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps/A_first_splash
자바스크립트
자바스크립트 창시자가 브렌던 아이크라는 것만 알고 갑시다. 지금은 파이어폭스를 만든 모질라에서 일하고 계십니다.

중요한 점은 10일만에 만들어진 허접한 언어였던 자바스크립트가 정말 중요한 언어가 되었다는 겁니다. 
자바의 그림자에서 벗어난 지도 수 년이 지났고요. 물론 아직도 N사 지식인에서 자바와 자바스크립트를 구별 못하는 분들이 많고, 
마인크래프트 스크립트를 달라고만 자꾸 올라오는 슬픈 현실이... 

그래도 자바스크립트는 웹 언어 중에 1위를 계속 달리고 있습니다. 
많은 곳에서 C나 Java, Python으로 프로그래밍을 배우는데, 저는 자바스크립트로 처음 배워도 괜찮다고 생각합니다. 다른 언어에 비해 장점이 있거든요. 

절차형, 객체지향형, 함수형 언어를 모두 아우를 수 있습니다. 한 언어로 여러가지 프로그래밍 기법을 배울 수 있는거죠. 
웹에 정보가 제일 많습니다. 궁금할 때 도움을 줄 사람이 많습니다.
텍스트 에디터, IDE 같은 것을 설치할 필요가 없고 인터넷 브라우저만 있으면 됩니다.
결과를 바로 인터넷 브라우저 화면으로 볼 수 있어 편합니다. 
컴퓨터 인터넷 브라우저를 사용중이라면 키보드 F12(개발자도구)를 누르고 콘솔(console)을 누른 뒤 콘솔 창에다가 따라 쳐보세요. 
코드에 대한 결과를 바로 확인할 수 있습니다. 



[변수(Variable)]
아래는 간단한 날짜 확인 프로그램입니다. 콘솔 창에 따라서 치거나 복붙(복사 붙여넣기)한 후 엔터를 쳐보세요! 복붙보다는 직접 쳐서 하는 것을 추천드립니다. 
프로그래밍은 눈으로는 공부하기 힘든 과목이죠. 참고로 코드가 여러줄인데 콘솔에서 줄바꿈을 하려면 Shift + Enter을 쳐야합니다. 
그냥 엔터를 치면 코드가 실행되어버립니다. 아래의 코드 중에서 // 와 그 뒷 부분은 주석을 의미합니다. 
코드에는 영향을 미치지 않고 그냥 내용에 대해 설명하는 부분입니다. 앞으로 주석을 통해 설명드릴겁니다. 여러분은 입력할 필요 없습니다.

var dateChecker = function() {
	var date = new Date(); // 현재 날짜를 저장
	alert(date); // 날짜를 알림
}
dateChecker(); // 실행


현재의 날짜를 알리는 알림창이 떴나요? 이렇게 다른 프로그램을 사용하지 않고도 바로 결과를 볼 수 있습니다.
 위의 코드는 무슨 뜻인지는 몰라도 차차 알게 될 겁니다. 

자세히 보면 var이라는 문자가 여러 번 반복되는데요. 바로 저게 이번 시간에 배울 변수(variable)입니다. variable의 앞 세 글짜를 따서 var입니다.

말 그대로 변수란 변하는 수 입니다. 뭐가 변하냐면, 데이터가 변합니다. 데이터는 프로그래밍에서 기본이죠. 어떠한 정보든지 다 데이터입니다. 
제 홈페이지만 하더라도 유저의 정보, 포스트, 댓글 등등 수 많은 데이터를 처리해야합니다. 
데이터를 처리하기 위해서는 데이터를 저장하는 공간이 있어야 합니다. 이 공간은 메모리에 마련됩니다. 
컴퓨터를 잘 모르시는 분은 RAM이라고 생각하면 됩니다. (RAM이 커야 좋은 이유를 아시겠죠? 데이터를 저장할 공간이 늘어납니다!) 그 공간이 바로 변수라고 부릅니다.

데이터에는 여러 종류가 있는데요. 프로그래밍마다 또 종류가 다릅니다. 
자바스크립트에서 데이터를 한 번 만들어볼까요? 콘솔 창에 한 줄씩 따라 쳐보세요! 아까도 말했듯이 주석을 칠 필요가 없습니다!

var a = ''; // 문자열
var b = 0; // 숫자
var c = false; // 불린
var d = null; // 널
var e = undefined; // 언디파인드
var f = []; // 배열
var g = {}; // 객체
var h = function() {}; // 함수

뭔가 하나 빼먹은 듯한 느낌이 들지만 아닐 거라고 믿고 넘어가죠. 
var a는 자바스크립트 엔진(자바스크립트 코드를 해석하는 도구)에게 "야, 이제 데이터 저장공간을 마련해! 이름은 a로 하고!"라고 말하는 겁니다. 
이런 것을 변수를 선언한다라고 표현합니다.

그리고 var a = ''; 로 a에 ''를 대입합니다. =으로 대입한다는 것을 표시했는데, 수학에서 말하는 같다(equal)라는 뜻이 아닙니다. 
프로그래밍에서 같다는 ==이고 =는 대입(assign)한다는 뜻입니다. 
이렇게 변수를 선언하자마자 값을 대입하는 것을 초기화한다고 표현합니다. 
선언, 대입, 초기화같은 단어는 자주 쓰이니 기억해둡시다.
변수의 이름을 정할 때는 a,b,c,d,... 말고도 이름을 한국어로 지어도 되고, 중국어, 일본어, 유니코드, 심지어 특수문자($와  _만 가능) 등등 상관없습니다. 
하지만 세계적으로는 영어 대소문자와 $, _만 사용합니다. 
문장의 마지막을 보면 ;(세미콜론)으로 끝나는데 문장이 끝났다는 것을 컴퓨터에게 알리는 프로그래밍 기호입니다. 
아래와 같이 만들었던 변수를 조작할 수 있습니다. 기존의 변수에 저장되어 있던 내용을 변경하는 행위입니다.

var a = 'string'; // a의 이름을 가진 저장공간을 만들고 문자열을 넣습니다.
a = 'rename'; // a의 이름을 가진 저장공간에 다른 문자열을 넣습니다.
a; // 'rename';

위와 같이 이름을 사용하면 됩니다. 변수의 이름으로는 a,b,c,d와 같이 의미가 없어 다른 사람이 보기에 무슨 뜻인지 알기 힘든 이름 대신 구체적인 이름을 주로 사용합니다.

var a = 1; // 나쁨
var number = 1; // 좋음

저장공간 이름이 아무 의미 없는 a보다 number인게 더 낫겠죠? 
숫자가 들어올 것을 예상할 수 있으니까요. 짧으면서도 구체적인 이름을 짓도록 합시다. (이게 제일 어려운 것 같습니다)

camelCase
var evenNumber = 2; // camelCase
var evenNumberWithoutUxAndMinus = 4; // 나쁨

위의 예제를 보면 even number가 아니라 evenNumber라고 썼습니다. 
띄어쓰기를 하지 않는 대신에 두 번째 단어부터 첫 글자를 대문자로 쓴 것을 보실 수 있습니다. 
변수 이름에는 띄어쓰기가 들어가면 안 되거든요. camelCase라고 하는데 낙타 등처럼 구불구불한 모양이라고 해서 camelCase라고 이름지어졌습니다. 
자바스크립트는 camelCase로 변수명을 만드는 것이 규칙입니다. 

camelCase 외에도 PascalCase도 있고, snake_case도 있습니다. 
하지만 자바스크립트는 camelCase라는 거! 잊지마세요. camelCase 규칙을 따르는 것은 좋지만 
evenNumberWithoutUxAndMinus는 너무 길고(읽다가 숨 넘어갈 것 같습니다) 한 눈에 안 들어옵니다. 
너무 길지 않게, 짧으면서도 핵심을 담고 있도록 작명하는 센스가 필요합니다.

변수 이름 중에는 안 되는 규칙들이 몇 개 있습니다. 일단 숫자로 시작하면 안 되고요. 
예약어라고 자바스크립트에서 미리 쓰이는 단어들이 있습니다. 
for, while, do, if, catch, try, finally, else, import, export, default, break, continue, case, switch, class, function, var, let, const 등등 많습니다. 
언제 외우느냐고요? 외울 필요 없습니다. 

위에 해당하는 예약어를 쓰면 친절하게 해석기에서 Uncaught SyntaxError: unexpected token [예약어이름] 이렇게 경고창이 뜹니다. 
아래 내용을 복사해보세요.

var for = 'a'; // Uncaught SyntaxError: Unexpected token for(…)

[자료형]
자바스크립트 자료형에 대해 알아보겠습니다. 
그냥 자바스크립트 자료(data)의 종류(type)라고 생각하시면 됩니다. 
다른 언어를 공부하셨던 분들은 다른 언어들은 변수가 var 대신에 int라거나 float, char, double 등등으로 시작한다는 것을 아실겁니다. 
다른 언어를 모르시는 분들은 안 헷갈려서 다행이네요

자바스크립트는 그런 것 없습니다. 그냥 var 하나입니다. 
var에다가 문자를 넣으면 문자 데이터가 되고, 숫자를 넣으면 숫자 데이터가 됩니다. 편하죠? 근데 이 편함이 나중에 불편함이 되기도 합니다. 
이제부터 하나씩 소개하겠습니다.


문자열(String)
문자열은 데이터에 문자를 저장하는 겁니다.

var string = "string" // 큰 따옴표
var string2 = 'string' // 작은 따옴표
var string3 = "'string'" // 작은따옴표가 문자열에 들어있으면 큰따옴표로 감쌉니다.
var string4 = '"string"' // 반대의 경우
var string5 = '\'string\'' // 한가지 따옴표만 쓰고 싶을 때는 \로 이스케이핑

문자열은 큰따옴표나 작은따옴표 중에 하나를 쓰면 됩니다. 상황에 맞게요. 
작은따옴표가 문자열에 포함되어 있으면 큰따옴표로 감싸고요. 반대의 상황은 반대로 하면 됩니다. 
그냥 한 가지 따옴표만 쓰고 싶을 경우는 \를 문자열의 따옴표 앞에 붙여 이거는 문자열 안의 따옴표라는 것을 알려주어야합니다. 
\를 붙이는 행위를 이스케이핑이라고 부릅니다.

숫자(Number)
그냥 숫자를 넣으면 됩니다. 다른 언어처럼 Int, Short, Long, Double 이런 구분이 없습니다. 그냥 아무거나 다 넣으면 됩니다.

var number = 1;
var float = 5.6;

불린(Boolean)
 true와 false입니다. 'true'가 아니라 따옴표 없이 true입니다. on/off나 yes/no라고 생각하셔도 됩니다.

var bool = true;
var bool2 = false;
Undefined / Null

그 다음 Undefined와 Null이 좀 헷갈립니다. 둘 다 빈 값인데 좀 차이가 있습니다.

var a; // 자동으로 undefined가 들어갑니다.
a; // undefined

undefined는 변수를 만들어 놓았는데 아무 값도 집어넣지 않았을 때 자동으로 undefined(말 그대로 정해지지 않음)가 되고요. 
null은 빈 값을 변수에 의도적으로 넣는겁니다.  
아무 것도 안 해도 undefined가 되는데 굳이 왜 null을 넣느냐고요? null은 그냥 넣는게 아니라

var b = 125;
b = null;
b; // null

이렇게 기존에 있는 값을 지울 때 사용합니다.



객체(Object)
객체란, 현실의 사물을 프로그래밍에 반영한 겁니다. 코드로 보는게 이해하기 쉽겠죠? 저를 프로그래밍에 반영해서 간단한 코드로 만들어보겠습니다!

var ux = {
	firstName: 'ux',
	lastName: 'Css'
};

짜잔, 간단하게 만들었습니다!(너무 간단한가요?) 이게 저를 자바스크립트로 구현한 것입니다. 
위와 같이 ux라는 변수에 { }로 감싼 덩어리를 넣었습니다. 바로 이 덩어리가 저를 표현하는 객체입니다. 객체의 부분별 이름을 알려드리겠습니다.


속성(Property)
객체 안을 보면 firstName과 lastName이 왼쪽에 있고, 'ux'와 'Css'가 오른쪽에 있네요. 콤마로 구분되는 것들을 객체의 속성이라고 부릅니다. 
ux 객체에는 firstName: 'ux'와 lastName: 'Css'까지 두 개의 속성이 있는거죠. 속성끼리는 쉼표로 구분해줍니다. 
위에서는 보기 좋게 줄 바꿈을 했지만, 꼭 줄바꿈을 해야하는 것은 아닙니다. 

var ux = { firstName: 'ux', lastName: 'Css' }; 

위 처럼 쉼표로 구분되기만 하면 충분합니다.

저를 ux라는 객체로 표현했다고 했죠. 
너무 간단한게 마음에 안 드나요? firstName, lastName 외에도 age, height, weight 등의 여러 가지 속성을 더 추가할 수 있겠죠? 
자신을 직접 객체로 표현해보세요!

키(Key)와 값(Value)
속성에서 firstName과 lastName 같은 것들을 객체의 키라고 부르고 'ux'와 'Css'를 값이라고 부릅니다.
(괄호 안의 영어는 외워두시는 게 좋습니다.) 
즉, 속성은 키: 값의 관계로 이루어져있죠. 키는 속성명이라고 생각하시면 됩니다.

참고로 키는 문자열만 가능합니다. 또 한가지, 속성명은 따옴표가 없어도 됩니다. 있어도 상관은 없습니다. 
위를 보시면 firstName과 lastName은 문자열인데도 따옴표로 안 감싸줬죠? 반드시 따옴표로 감싸줘야 하는 경우도 있습니다. 
바로 키에 띄어쓰기가 들어간 경우입니다.

var wrap = { 'ex ample': 'wrap' };

위와 같은 경우, wrap 객체의 속성명은 'ex ample'입니다. 이렇게 속성명 안에 띄어쓰기가 들어있을 경우는 따옴표로 감싸줍니다.
속성값은 어떤 값이든지 상관없습니다. 문자열이어도 되고, 숫자여도 되고, 객체여도 됩니다. 아직 안 배웠지만, 객체나 함수여도 상관 없습니다. 
미리 알려드리자면, 속성값이 함수인 것을 우리는 메소드라고 특별히 따로 부릅니다.
그렇다면 ux 객체 안에 firstName이나 lastName 속성의 값을 사용하고 싶을 땐 어떻게 할까요? 아까 키가 속성의 이름이라고 했죠? 
객체한테 속성의 이름을 부르면 됩니다!

ux.firstName; // 'ux'
ux['firstName']; // 'ux' (이렇게도 가능합니다)
ux.lastName; // 'Css'
ux['lastName']; // 'Css'

이렇게 접근할 수 있습니다. 마침표를 사용해서 ux 객체 안의 속성들에 접근하는 겁니다. 
아니면 [ ] 안에 속성명을 적어서 접근할 수도 있습니다. 하지만 [ ] 안에 적는 것보다는 주로 마침표를 사용합니다. 
어쩔 수 없이 [ ] 안에 적어야하는 경우는 위에서처럼 속성명에 띄어쓰기가 들어가 있는 경우입니다. 
아까 wrap 객체 안의 'ex ample' 속성에 접근하고 싶을 때는 wrap['ex ample'] 이렇게 접근해야 합니다. 그냥 wrap[ex ample] 하면 오류가 납니다.

객체를 다양하게 활용하는 방법을 살펴봅시다.

ux.lastName = 'Lee';
ux; // { firstName: 'ux', lastName: 'Lee' }

위와 같이 객체 안의 속성을 바꿀 수도 있습니다.

var ux = {
	body: {
		height: 173,
		weight: 66
	}
};
ux.body.height; // 173

아까도 말했듯이 객체 안에 속성값으로 객체가 들어갈 수도 있습니다. 
ux 객체의 속성으로 body가 있는데 그 값이 다시 객체인 겁니다. 객체의 속성에 접근하는 것이니까 마침표를 사용해서 점점 더 안으로 들어가면 됩니다. 
객체를 사용해서 복잡한 데이터 구조를 짤 수 있겠죠?
객체의 속성을 삭제하는 방법도 있습니다. 앞에 delete 키워드를 붙이면 됩니다. 위의 예제와 이어집니다.

delete ux.body.height;
ux.body; // { weight: 66 }

객체는 다음과 같이 만들 수도 있습니다.

var ux = new Object();
ux.firstName = 'ux';
ux.lastName = 'Css';
ux.body = new Object();
ux.body.height = 173;
ux.body.weight = 66;

new를 사용하는 방법은 다른 프로그래밍 언어를 배우셨던 분들이라면 보신 적이 있을 겁니다. 
그러나 위와 같이 만드는 경우는 거의 없고 그냥 { } 안에 바로 만들어버립니다. 또한 { }를 사용하는 게 권장사항입니다. 
{ }를 사용해서 만든 객체를 객체 리터럴(literal)이라고 부릅니다.

new를 사용하지 않고 만드는 것을 리터럴이라고 부릅니다. 문자열이나 숫자도 사실 new String(), new Number() 이렇게 만들 수 있습니다. 
하지만 그러지 않고 그냥 'ux'나 173처럼 그냥 값을 바로 썼죠? 이런 것이 다 문자열 리터럴, 숫자 리터럴입니다. 문자 그대로의 것들을 의미합니다.

객체 중에는 특수한 객체가 있습니다. 바로 함수(Function)와 배열(Array)입니다.

배열(Array)
var array = [];
var array2 = [1, "Hello", [1,2,3], { hi: 1 }];

배열은 [ ]로 감싸서 나타내고, 객체 리터럴처럼 안에는 무엇이든지 다 들어갈 수 있습니다. 
배열 안에 배열이 들어가도 되고, 배열 안에 객체가 들어가도 됩니다. 아직 안 배웠지만 함수도 들어갈 수 있습니다. 
배열 안에 들어간 것들을 우리는 요소(item)이라고 부릅니다. 객체의 속성처럼 쉼표로 구분하면 됩니다.

다른 프로그래밍 언어를 배우셨던 분들을 위해 한 가지 알려드리자면, 
자바스크립트는 배열의 길이를 미리 정할 필요가 없습니다. 안의 요소에 따라 자동으로 늘어나거나 줄어듭니다.

객체와의 차이점은 키가 없다는 거죠. 그냥 값들만 순서대로 나열되어 있습니다. 아까 ux 객체를 생각해보세요. 거기서 키만 없으면,

var ux = ['ux', 'Css'];

이런 모양이 되는 겁니다. 굳이 키가 필요하지 않고 값만 많이 나열하고 싶을 때 배열을 사용합니다. 

배열 안의 요소를 선택하려면 뒤에 몇 번째 요소인지 숫자를 붙여주면 됩니다. 자바스크립트에서는 0이 첫 번째입니다. 
따라서 [0]을 붙이면 첫 번째 요소 ux가 선택되고, [1]을 붙이면 두 번째 요소 Css가 선택됩니다.

ux[0]; // 'ux'
ux[1]; // 'Css'

사실 배열도 키가 있습니다. 한 문단만에 말이 바뀌어서 죄송합니다. 
배열은 자동으로 키가 0, 1, 2, 3, ... 순서로 주어집니다. 
즉 'ux' 값의 키는 0이고, 'Css' 값의 키는 1입니다. 위에서 요소를 선택한 원리가 바로 이거죠. 키를 통해 배열의 요소를 선택한 겁니다.

ux['firstName']; // 'ux'

아까 객체는 [ ]안에 속성 이름을 넣어서 값을 불러오는 방법도 있었죠? 그와 비슷합니다. 어떻게보면

var array = ['hi', 'js', 123];
var object = {
	0: 'hi',
	1: 'js',
	2: 123
};

위의 두 개가 비슷하다고 볼 수도 있습니다. 다만, 배열은 객체보다 몇 가지 추가적인 기능들을 제공합니다. 
그 기능은 배열 강좌에서 알려드리겠습니다. 또한 배열이 아닌 일반 객체도 배열과는 다른 기능들이 몇 개 있습니다.

배열도 역시 다음과 같이 만들 수도 있습니다.

var array = new Array();
array[0] = 1;
array[1] = 'Hello';

하지만 위와 같은 방법보다는 그냥 [ ] 안에 넣는 것을 자주 사용합니다. 
그리고 [ ]를 사용하는 게 권장사항이기도 합니다. new를 사용하지 않고 [ ]만 사용해서 만든 배열을 배열 리터럴이라고 부릅니다. 객체 리터럴 같은 겁니다.
객체와 배열은 특성상 대부분의 프로그래밍 언어에 있습니다. 이들은 나중에 배울 자료구조와 알고리즘의 기본이기도 합니다. 




자바스크립트의 꽃은 함수입니다. 
자바스크립트는 모든 것을 함수를 통해 할 수 있습니다. 
따라서 함수의 기본부터 확실히 익혀 놓는 게 좋겠죠?


[함수(Function)]
함수란 뭘까요? 학교 수학시간에 배웠던 함수와 비슷합니다.

y = f(x)

x에 어떤 값을 넣으면 y가 f(x)에 상응하는 식에 의해 자동으로 나왔죠? 
그것과 비슷합니다. 자바스크립트에서 함수는 다음과 같이 만듭(선언)니다.

function addOne(x) {
	var y = x + 1;
	return y;
}

또는 다음과 같이도 만들 수 있습니다. 
아래처럼 변수를 선언하고 함수를 대입하는 방식을 함수 표현식이라고 부릅니다. 
(위의 방식은 함수 선언이라고 부릅니다) 아래와 위의 방식의 차이로는 호이스팅이라는 현상이 있는데, 나중에 실행 컨텍스트 시간에 설명하겠습니다. 
또 다른 차이점은 위의 방식으로 만들 때에는 끝에 ;를 붙이지 않습니다.

var addOne = function(x) {
	var y = x + 1;
	return y;
};

addOne이 함수의 이름(변수의 이름이기도 하고요)이고, x가 사용자가 넣고 싶은 것을 넣는 곳입니다. 
x를 매개변수라고 하고 영어로는 Parameter라 합니다. 
함수 안에는 y라는 변수를 만든 뒤에 x값에 1을 더하라고 되어있습니다. 
return은 y값을 바깥으로 내보내고 함수를 종료하라는 겁니다. 
즉 x값을 받아서 1을 더한 후 바깥으로 내보내라는 거죠. 이것을 반환한다고 표현합니다.

이 함수를 실행하려면 함수의 이름에다 소괄호(())를 붙이고, 괄호 안에 매개변수 x에 상응하는 인자를 넣어주면 됩니다. 
이렇게 미리 만들어둔 함수를 실행하는 행위를 호출한다라고 표현합니다. 
호출을 통해서 반환하는 값을 저장할 변수를 미리 만들어둡시다. 아래에서는 변수 i에 addOne함수의 반환 값을 저장합니다.

var i = addOne(1);
i; // 2

1을 넣으면 그 1이 매개변수 x로 전달됩니다. 
이제 addOne 함수 내부 코드가 실행되죠. x가 1이니까 y는 2가 되고, return에 의해 y값이 반환(바깥으로 내보내져)되어 i에 y의 값인 2가 저장됩니다. 
여기서의 1은 매개변수라고 부르지 않고 인자(Argument)라고 부릅니다. 
함수를 선언할 때의 괄호 안의 값은 매개변수(Parameter), 함수를 호출할 때의 괄호 안의 값은 인자(Argument)입니다.

var j = addOne(2);
var k = addOne(100);

각각 j와 k의 값은 무엇일까요? 쉽죠? 3, 101입니다. 이번에는 곱하기 함수도 한 번 만들어봅시다.

function multiply(x, y) {
	return x * y; // 곱하기 표시(x)가 프로그래밍에서는 *
}

여기는 이전과는 다르게 매개변수(Parameter)가 x, y 두 개네요? 상관 없습니다. 그냥 함수를 호출할 때 두 개를 넣어주면 됩니다.

var l = multiply(5, 6); // 30
var m = multiply(10, 0); // 0

위의 경우에는 5가 x, 6이 y로 전달됩니다. 그리고 5 * 6의 결과값이 반환(return)되는 거죠. 
매개변수의 개수는 원하는 대로 만들 수 있습니다. 하지만 너무 많으면 사용할 때 헷갈립니다. 
그래서 매개변수가 많아질 것 같으면 객체를 주로 사용합니다.

var n = function(object) {
	return object.a + object.b + object.c + object.d;
};
n({ a: 1, b: 2, c: 3, d: 4 }); // 10

매개변수도 하나고, 인자도 객체 하나입니다. 
n에 인자로 넣은 객체가 object 매개변수로 전달되어 함수 안에서 활용됩니다. 
좀 어려운 문제를 내볼까요. 아까 만든 더하기와 곱하기 함수를 사용한 겁니다.

var a = multiply(addOne(2), addOne(4));

이걸 맞추셨다면 하나를 알면 열을 아는 분이시거나, 이미 자바스크립트에 익숙하면서 글을 읽으시는 분이겠죠? 차근차근 본다면,

multiply(addOne(2), addOne(4));

에서 addOne(2)==3이고, addOne(4)==5니까 
위의 함수는 var a = multiply(3, 5); 와 같습니다. 
따라서 답은 15죠. 이렇게 함수를 여러 개 조합해서 사용할 수도 있습니다.

함수 중에는 return을 하지 않는 함수도 있습니다. 첫 시간, 첫 번째 예로 보여드렸던 날짜를 표시하는 프로그램이 바로 그렇습니다.

var dateChecker = function() {
	var date = new Date();
	alert(date);
};
dateChecker(); // undefined

위와 같이 return이 없는 함수는 자동으로 undefined를 반환합니다. 
알림이 뜨는 것은 return과 상관이 없습니다. 알림은 alert(date); 의 결과로써 뜨는 거지 dateChecker의 return에 의한 것이 아닙니다. 
대신 알림이 뜬 후에 콘솔 창에 undefined가 표시되는 것을 볼 수 있습니다. 이게 바로 dateChecker 함수의 return 값입니다. 
사실 모든 함수는 return을 입력하지 않으면 자동으로 return undefined;가 마지막 코드로써 동작하는 겁니다.

undefined

한 가지 더 알아둘 점은 return 이후에는 함수가 종료되기 때문에 실행되지 않습니다. 
아래 코드에서는 alert('저는 실행되지 않습니다'); 이 부분이 return보다 뒤에 나오기 때문에 무시됩니다. 
그러니까 return 뒤에 코드를 적는 실수를 하지 마세요!

var really = function() {
	return;
	alert('저는 실행되지 않습니다');
};
really(); // undefined

이전 시간에 객체나 배열의 값으로 함수도 들어갈 수 있다고 했습니다. 기억나시나요? 자바스크립트에서는 함수도 하나의 값입니다.

var a = {
	b: function() {
		return;
	}
};

위의 경우에 속성 b의 값은 함수입니다. a.b(); 와 같이 하면 함수를 호출할 수 있습니다. 
전 시간에 이렇게 속성의 값으로 사용되는 함수를 메소드라고 부른다고 살짝 알려드렸습니다.

조금 더 어려운 경우를 살펴보겠습니다.

var mother = function(func) {
	func();
};
var children = function() {
	alert('안녕하세요');
};
mother(children); // '안녕하세요'

mother과 children 함수를 만들었는데 mother 함수를 호출할 때 인자로 children 함수를 넣었습니다. 
함수의 반환값이 아니라 함수 자체를 넣은거죠. 이렇게 넣은 children 함수는 func 매개변수로 전달되어 func();를 통해 호출됩니다. 
func();가 children();과 같습니다. 함수가 인자값과 매개변수로써 사용될 수 있는거죠.

이렇게 값으로 사용되는 함수를 프로그래밍에서는 1급 함수라고 부릅니다. 
즉 자바스크립트는 1급 함수를 사용하는 언어인 것이죠. 
	-->
</body>
</html>